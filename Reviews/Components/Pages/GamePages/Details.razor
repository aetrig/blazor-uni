@page "/games/details"
@using Microsoft.EntityFrameworkCore
@using Reviews.Components.GameReviews
@inject IDbContextFactory<Reviews.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Game</h2>
    <hr />
    @if (game is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2"></dt>
            <dd class="col-sm-10">
                <img src="@(game.ImageUrl)" style="width:50vw">
            </dd>
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@game.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@game.Description</dd>
            <dt class="col-sm-2">ReleaseDate</dt>
            <dd class="col-sm-10">@game.ReleaseDate</dd>
            <dt class="col-sm-2">Rate</dt>
            <dd class="col-sm-10">@game.Rate</dd>
            <dt class="col-sm-2">ImageUrl</dt>
            <dd class="col-sm-10">@game.ImageUrl</dd>
            <dt class="col-sm-2">RateCount</dt>
            <dd class="col-sm-10">@game.RatingsCount</dd>
        </dl>
        <div class="mb-3">
            <label for="addRating" class="form-label">Add rating:</label>
            <InputNumber id="addRating" @bind-Value="@newRating" class="form-control" />
        </div>
        <button @onclick="onAddRating" class="btn btn-primary">Add Rating</button>
        <div>
            <a href="@($"/games/edit?id={game.Id}")">Edit</a> |
            <a href="@($"/games")">Back to List</a>
        </div>
    }
</div>

@code {
    private Game? game;
    private float? newRating;

    [SupplyParameterFromQuery]
    private int Id { get; set; }
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        game = await context.Game.FirstOrDefaultAsync(m => m.Id == Id);

        if (game is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task onAddRating()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(game!).State = EntityState.Modified;

        game.Rate = (game.Rate * game.RatingsCount + newRating) / (game.RatingsCount + 1);
        game.RatingsCount++;

        await context.SaveChangesAsync();

    }
}
