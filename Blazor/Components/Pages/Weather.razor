@page "/weather"
@attribute [StreamRendering]
@rendermode @( new InteractiveServerRenderMode ( false ) )

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<input class="form-control mb-2 mr-sm-2" @oninput="@Input" placeholder="Search days" />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<p>The number of warm days is: @warmDays</p>
<div class="Row">
    <div class="form-inline">
        <div class="form-group">
            <button class="btn btn-primary" @onclick="() => WarmDaysFilter(15)">Filter out cold days</button>
            <button class="btn btn-primary" @onclick="Restore">Restore</button>
        </div>
    </div>
</div>

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[] forecastsCopy = new WeatherForecast[0];
    private int warmDays;
    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering",
"Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

        forecastsCopy = new WeatherForecast[forecasts.Length];
        Array.Copy(forecasts, forecastsCopy, forecasts.Length);
        warmDays = forecasts.Where(day => day.TemperatureC > 15).Count();
    }

    private void WarmDaysFilter(int temp)
    {
        forecasts = (forecasts ?? new WeatherForecast[0]).Where(day => day.TemperatureC > temp).ToArray();
    }

    private void Restore()
    {
        forecasts = new WeatherForecast[forecastsCopy.Length];
        Array.Copy(forecastsCopy, forecasts, forecastsCopy.Length);
    }

    private void Input(ChangeEventArgs arg)
    {
        Restore();
        forecasts = (forecasts ?? new WeatherForecast[0])
        .Where(day => (day.Summary ?? "").ToLower().Contains(((arg.Value ?? "").ToString() ?? "").ToLower())).ToArray();
    }
    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
